name: Build and Test
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Build and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        run: |
          # Create a simple test file if none exists
          mkdir -p tests
          if [ ! -f tests/test_app.py ]; then
            cat > tests/test_app.py << EOF
            import pytest
            from app.main import app

            @pytest.fixture
            def client():
                app.config["TESTING"] = True
                with app.test_client() as client:
                    yield client

            def test_get_books(client):
                response = client.get("/books")
                assert response.status_code == 200
                assert len(response.json) > 0

            def test_get_book(client):
                response = client.get("/books/1")
                assert response.status_code == 200
                assert "title" in response.json
          EOF
          fi
          pytest